// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using MyStarStable.Common;

namespace MyStarStable.iOS
{
    public class NotificationDataSource : UITableViewSource
    {
        private const string EventInvitationCellIdentifier = "EventInvitationNotificationCell";

        public NotificationDataSource()
        {
        }

        public override nint RowsInSection(UITableView tableview, nint section)
        {
            if (CalendarHelper.Instance.PendingEvents != null)
                return CalendarHelper.Instance.PendingEvents.Count;

            return 0;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            EventInvitationTableCell cell = tableView.DequeueReusableCell(EventInvitationCellIdentifier) as EventInvitationTableCell;
            // if there are no cells to reuse, create a new one
            if (cell == null)
                cell = new EventInvitationTableCell(EventInvitationCellIdentifier);
            CalendarEvent eventData = CalendarHelper.Instance.PendingEvents[indexPath.Row];
            cell.Event = eventData;
            return cell;
        }
    }

    
    public sealed partial class NotificationViewController : UITableViewController
	{
		public NotificationViewController (IntPtr handle) : base (handle)
		{
            RefreshControl = new UIRefreshControl();
            RefreshControl.ValueChanged += RefreshControlOnValueChanged;
		}

        private void RefreshControlOnValueChanged(object sender, EventArgs e)
        {
            CalendarHelper.Instance.GetPendingEventsAsync((result, reason) => 
            {
                InvokeOnMainThread(() =>
                {
                    RefreshControl.EndRefreshing();
                    if (!result)
                    {
                        UIAlertView alertView = new UIAlertView("APP/ALERT/TITLE/ERROR".Localize(), "APP/CAL/FETCH_PENDING_FAILED".Localize() + reason.Localize(), null, "APP/ALERT/BUTTON/OK".Localize(), null);
                        alertView.Show();
                    }
                });
            });
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            TableView.Source = new NotificationDataSource();

            CalendarHelper.Instance.PendingEventsChanged += (sender, args) =>
            {
                InvokeOnMainThread(() => TableView.ReloadData());
            };
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier == "NotificationsToEventDetailsSegue")
            {
                EventDetailsViewController controller = segue.DestinationViewController as EventDetailsViewController;
                if (controller != null)
                {
                    EventInvitationTableCell cell = sender as EventInvitationTableCell;
                    if (cell != null)
                    {
                        controller.Event = cell.Event;
                    }
                    controller.InviteDisplay = true;
                }
            }
        }

        
	}
}
