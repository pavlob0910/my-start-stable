// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;
using CoreGraphics;
using GoogleAnalytics.iOS;
using Foundation;
using UIKit;
using MyStarStable.Common;

namespace MyStarStable.iOS
{
    public class SearchDisplayControllerDelegate : UISearchDisplayDelegate
    {
        private FriendPickerViewController ParentController { get; set; }

        public SearchDisplayControllerDelegate(FriendPickerViewController parentController)
        {
            ParentController = parentController;
        }

        public override void DidEndSearch(UISearchDisplayController controller)
        {
            ParentController.TableView.ReloadData();
        }
    }

    public class FriendsDataSource : UITableViewSource
    {
        public List<CharacterFriend> FriendsList;
        public readonly HashSet<CharacterFriend> SelectedItems;
        public List<CharacterFriend> FilteredFriendsList;
        private FriendPickerViewController ParentController { get; set; }

        private const string CellIdentifier = "FriendsTableCell";

        public FriendsDataSource(FriendPickerViewController parentController)
        {
            ParentController = parentController;
            SelectedItems = new HashSet<CharacterFriend>();
        }


        public override nint RowsInSection(UITableView tableview, nint section)
        {
            bool searchResult = (tableview == ParentController.SearchDisplayController.SearchResultsTableView);
            if (FriendsList != null && !searchResult)
            {
                return FriendsList.Count;
            }
            else if (FilteredFriendsList != null && searchResult)
            {
                return FilteredFriendsList.Count;
            }
            else
            {
                return 0;
            }
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = tableView.DequeueReusableCell(CellIdentifier);

            // if there are no cells to reuse, create a new one
            if (cell == null)
            {
                cell = new UITableViewCell(UITableViewCellStyle.Default, CellIdentifier);
            }

            CharacterFriend friend = (tableView == ParentController.SearchDisplayController.SearchResultsTableView ? FilteredFriendsList[indexPath.Row] : FriendsList[indexPath.Row]);
            cell.Accessory = (SelectedItems.Contains(friend) ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None);
            cell.TextLabel.Text = friend.FirstName + " " + friend.LastName;

            return cell;
        }

        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = tableView.CellAt(indexPath);
            if (cell == null)
                return;

            bool searchResult = (tableView == ParentController.SearchDisplayController.SearchResultsTableView);

            cell.Selected = false;

            bool selected = (cell.Accessory == UITableViewCellAccessory.Checkmark);
            CharacterFriend selectedFriend = (searchResult ? FilteredFriendsList[indexPath.Row] : FriendsList[indexPath.Row]);

            if (ParentController.Mode == FriendPickerViewController.SelectionMode.Multiple)
            {
                cell.Accessory = (selected ? UITableViewCellAccessory.None : UITableViewCellAccessory.Checkmark);
                if (selected)
                    SelectedItems.Remove(selectedFriend);
                else
                    SelectedItems.Add(selectedFriend);
            }
            else
            {
                SelectedItems.Clear();
                SelectedItems.Add(selectedFriend);
                if (ParentController.FriendSelected != null)
                {
                    ParentController.FriendSelected(ParentController, selectedFriend);
                }
                ParentController.NavigationController.PopViewController(true);
            }

        }
    }

	public sealed partial class FriendPickerViewController : UITableViewController
	{
	    public enum SelectionMode
	    {
	        Single,
            Multiple
	    }

	    public SelectionMode Mode;

        public EventHandler<CharacterFriend> FriendSelected;

        public HashSet<UInt64> PreSelected { get; set; }

		public FriendPickerViewController (IntPtr handle) : base (handle)
		{
            RefreshControl = new UIRefreshControl();
            RefreshControl.ValueChanged += RefreshControlOnValueChanged;

            PreSelected = new HashSet<ulong>();

            SearchDisplayController.SearchBar.TextChanged += SearchBarTextChanged;
		    SearchDisplayController.Delegate = new SearchDisplayControllerDelegate(this);
		}


	    private void SearchBarTextChanged(object sender, UISearchBarTextChangedEventArgs uiSearchBarTextChangedEventArgs)
	    {
	        string searchText = uiSearchBarTextChangedEventArgs.SearchText.ToLower();
	        FriendsDataSource source = TableView.Source as FriendsDataSource;
	        if (source != null)
	        {
	            source.FilteredFriendsList = 
                    source.FriendsList.Where(
                        friend => (friend.FirstName.ToLower().Contains(searchText) || friend.LastName.ToLower().Contains(searchText))
                    ).ToList();

                TableView.ReloadData();
	        }
	    }

	    private void RefreshControlOnValueChanged(object sender, EventArgs e)
	    {
            RefreshControl.EndRefreshing();
        }

	    public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            FriendsDataSource source = new FriendsDataSource(this);
	        TableView.Source = source;
	        SearchDisplayController.SearchResultsSource = source;
        }

	    public override void ViewWillAppear(bool animated)
	    {
	        base.ViewWillAppear(animated);

            GAI.SharedInstance.DefaultTracker.Set(GAIConstants.ScreenName, "Friend Picker Screen");
            GAI.SharedInstance.DefaultTracker.Send(GAIDictionaryBuilder.CreateScreenView().Build());

            TableView.ContentOffset = new CGPoint(TableView.ContentOffset.X, TableView.ContentOffset.Y - RefreshControl.Frame.Height);
            RefreshControl.BeginRefreshing();

	        StableSession.Instance.GetFriendsAsync((friends, reason) =>
	        {
                InvokeOnMainThread(() => 
                {
	                FriendsDataSource source = TableView.Source as FriendsDataSource;
	                if (source != null)
	                {
                        source.FriendsList = friends;
	                    if (friends != null)
	                    {
	                        foreach (CharacterFriend friend in source.FriendsList)
	                        {
	                            if (PreSelected.Contains(friend.CharacterId))
	                            {
	                                source.SelectedItems.Add(friend);
	                            }
	                        }
	                    }
	                    source.FriendsList.Sort(new CharacterFriendComparer());
	                    TableView.ReloadData();
	                }
                    RefreshControl.EndRefreshing();
                });
            });
        }

	    public HashSet<CharacterFriend> GetSelected()
	    {
            FriendsDataSource source = TableView.Source as FriendsDataSource;
	        return source != null ? source.SelectedItems : null;
	    }
	}
}
