// This file has been autogenerated from a class added in the UI designer.

using System;
using CoreGraphics;
using BigTed;
using GoogleAnalytics.iOS;
using UIKit;
using MyStarStable.Common;

namespace MyStarStable.iOS
{
	public partial class ComposeViewController : UIViewController
	{
        public CharacterMailMessage MailMessage { get; set; }

	    private bool _nameIsValid;
	    private string _lastValidatedName;

        public ComposeViewController(IntPtr handle)
            : base(handle)
        {
            _nameIsValid = false;
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            SubjectTextField.Delegate = new LimitTextFieldDelegate() { MaxTextLength =  48 };
			if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Phone) {
				MessageTextView.Text = "\n" + "APP/MAIL/SENT_FROM".Localize() + "iPhone";
			} else if (UIDevice.CurrentDevice.UserInterfaceIdiom == UIUserInterfaceIdiom.Pad) {
				MessageTextView.Text = "\n" + "APP/MAIL/SENT_FROM".Localize() + "iPad";
			}

            MessageTextView.Delegate = new LimitTextViewDelegate() { MaxTextLength = 1024 };
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);

            // If MailMessage is set, this is a reply.
            if (MailMessage != null)
            {
                GAI.SharedInstance.DefaultTracker.Set(GAIConstants.ScreenName, "Mail Screen / Compose Reply");
                GAI.SharedInstance.DefaultTracker.Send(GAIDictionaryBuilder.CreateScreenView().Build());

                SubjectTextField.Text = ("APP/MAIL/REPLY_PREFIX".Localize() + " " + MailMessage.Subject).Truncate(48);
                ToTextField.Text = MailMessage.SenderCharacterName;
                _lastValidatedName = MailMessage.SenderCharacterName;
                _nameIsValid = true;
                UpdateNameViewStatus();
            }
            else
            {
                GAI.SharedInstance.DefaultTracker.Set(GAIConstants.ScreenName, "Mail Screen / Compose");
                GAI.SharedInstance.DefaultTracker.Send(GAIDictionaryBuilder.CreateScreenView().Build());
            }
        }

	    public override void ViewDidAppear(bool animated)
	    {
	        base.ViewDidAppear(animated);
        
            MessageTextView.BecomeFirstResponder();
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, Foundation.NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier == "ComposeToFriendsSegue")
            {
                FriendPickerViewController controller = segue.DestinationViewController as FriendPickerViewController;
                if (controller != null)
                {
                    controller.Mode = FriendPickerViewController.SelectionMode.Single;
                    controller.FriendSelected += FriendSelected;
                }
            }
        }

	    private void FriendSelected(object sender, CharacterFriend characterFriend)
	    {
            ToTextField.Text = characterFriend.FirstName + " " + characterFriend.LastName;
            _lastValidatedName = ToTextField.Text;
            _nameIsValid = true;
            UpdateNameViewStatus();
            FriendPickerViewController friendPickerViewController = sender as FriendPickerViewController;
	        if (friendPickerViewController != null)
	            friendPickerViewController.FriendSelected -= FriendSelected;
	    }

	    private void UpdateNameViewStatus()
	    {
            bool isIOS7 = UIDevice.CurrentDevice.CheckSystemVersion(7, 0);
            UIImage image = null;
            if (_nameIsValid)
            {
                image =
                    (isIOS7
                        ? UIImage.FromBundle("BTProgressHUD/success_7.png")
                        : UIImage.FromBundle("BTProgressHUD/success.png"));
            }
            else
            {
                image =
                    (isIOS7
                        ? UIImage.FromBundle("BTProgressHUD/error_7.png")
                        : UIImage.FromBundle("BTProgressHUD/error.png"));
            }

            ToTextField.RightView = new UIImageView(image) { Frame = new CGRect { Height = ToTextField.Frame.Height, Width = ToTextField.Frame.Height } };
            ToTextField.RightView.ContentMode = UIViewContentMode.ScaleAspectFit;
            ToTextField.RightViewMode = UITextFieldViewMode.Always;
	    }

	    partial void ToFieldEditingDidEnd(UITextField sender)
	    {
	        string newName = sender.Text;
	        if (!String.Equals(_lastValidatedName, newName, StringComparison.CurrentCultureIgnoreCase))
	        {
	            StableSession.Instance.ValidateNameAsync(sender.Text, ValidateNameResult);
	            _lastValidatedName = newName;
	        }
	        else
	        {
                ToTextField.RightViewMode = UITextFieldViewMode.Always;
	        }
	    }

	    partial void ToFieldEditingDidBegin(UITextField sender)
	    {
            sender.RightViewMode = UITextFieldViewMode.Never;
	    }

	    private void ValidateNameResult(bool result, string reason)
	    {
	        InvokeOnMainThread(() =>
	        {
	            _nameIsValid = result;
                UpdateNameViewStatus();
	        });
	    }

	    partial void SendButtonAction(UIBarButtonItem sender)
	    {
	        if (!_nameIsValid)
	        {
	            BTProgressHUD.ShowToast("APP/MAIL/NEED_VALID_CHAR".Localize(), ProgressHUD.MaskType.None, false, 3000);
	            return;
	        }

            if (!(SubjectTextField.Text.Length > 0))
            {
                BTProgressHUD.ShowToast("APP/MAIL/NEED_SUBJECT".Localize(), ProgressHUD.MaskType.None, false, 3000);
                return;
            }

            if (!(MessageTextView.Text.Length > 0))
            {
                BTProgressHUD.ShowToast("APP/MAIL/NEED_TEXT".Localize(), ProgressHUD.MaskType.None, false, 3000);
                return;
            }
            
            BTProgressHUD.ShowContinuousProgress("APP/MAIL/SENDING".Localize(), ProgressHUD.MaskType.Black);

	        StableSession.Instance.SendMailAsync(ToTextField.Text, SubjectTextField.Text, MessageTextView.Text, SendMailResult);
	    }

	    private void SendMailResult(bool result, string reason, string subject, string message)
	    {
	        InvokeOnMainThread(() =>
	        {
                BTProgressHUD.Dismiss();
	            if (result)
	            {
	                if (subject == null && message == null)
	                {
	                    NavigationController.PopViewController(true);
                        BTProgressHUD.ShowSuccessWithStatus("APP/MAIL/SEND_SUCCESS".Localize(), 2000);
	                }
	                else
	                {
	                    SubjectTextField.Text = subject;
	                    MessageTextView.Text = message;
                        BTProgressHUD.ShowToast("APP/MAIL/CRISP_FILTERED".Localize(), ProgressHUD.MaskType.None, false, 3000);
	                }
	            }
	            else
	            {
                    UIAlertView alertView = new UIAlertView("APP/ALERT/TITLE/ERROR".Localize(), "APP/MAIL/SEND_FAILED".Localize() + reason.Localize(), null, "APP/ALERT/BUTTON/OK".Localize(), null);
                    alertView.Show();
	            }
	        });
	    }
	}
}
