// This file has been autogenerated from a class added in the UI designer.

using System;
using BigTed;
using GoogleAnalytics.iOS;
using Foundation;
using UIKit;
using MyStarStable.Common;

namespace MyStarStable.iOS
{
	public partial class MailMessageViewController : UIViewController
	{
		public MailMessageViewController (IntPtr handle) : base (handle)
		{
		}

	    public CharacterMailMessage MailMessage { get; set; }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            GAI.SharedInstance.DefaultTracker.Set(GAIConstants.ScreenName, "Mail Screen / View");
            GAI.SharedInstance.DefaultTracker.Send(GAIDictionaryBuilder.CreateScreenView().Build());
        }

	    public override void ViewDidLoad()
        {
            base.ViewDidLoad();

            NavigationItem.RightBarButtonItems = new UIBarButtonItem[] { ReplyButton, TrashButton };

            SubjectTextView.TextContainerInset = UIEdgeInsets.Zero;
            SubjectTextView.Text = MailMessage.Subject;

            FromTextView.TextContainerInset = UIEdgeInsets.Zero;
	        FromTextView.Text = MailMessage.SenderCharacterName;

	        MessageTextView.Text = MailMessage.Message;

	        ReplyButton.Enabled = (int)MailMessage.Type < 2;
            TrashButton.Enabled = !MailMessage.HasAttachment;

	        if (MailMessage.ReadDate == null)
	        {
                MailHelper.Instance.MarkMailReadAsync(MailMessage, null);
	        }

	        if (MailMessage.HasAttachment == false)
	        {
	            AttachmentLabel.RemoveFromSuperview();
	            View.SetNeedsLayout();
	        }
        }

        partial void DeleteButtonAction(UIBarButtonItem sender)
        {
            UIAlertView alertView = new UIAlertView("APP/ALERT/TITLE/CONFIRM".Localize(), "APP/MAIL/CONFIRM_DELETE".Localize(), null, "APP/ALERT/BUTTON/CANCEL".Localize(), new string[] { "APP/ALERT/BUTTON/OK".Localize() });
            alertView.Dismissed += DeleteAlertDismissed;
            alertView.Show();

        }

        private void DeleteAlertDismissed(object sender, UIButtonEventArgs uiButtonEventArgs)
        {
            UIAlertView view = sender as UIAlertView;
            if (view == null || uiButtonEventArgs.ButtonIndex == 0)
            {
                return;
            }

            BTProgressHUD.ShowContinuousProgress("APP/MAIL/DELETING".Localize(), ProgressHUD.MaskType.Black);
            MailHelper.Instance.DeleteMailAsync(MailMessage, DeleteResult);
        }

	    private void DeleteResult(bool result, string reason)
	    {
	        InvokeOnMainThread(() =>
	        {
	            BTProgressHUD.Dismiss();
	            if (result)
	            {
	                NavigationController.PopViewController(true);
	            }
	            else
	            {
                    UIAlertView alertView = new UIAlertView("APP/ALERT/TITLE/ERROR".Localize(), "APP/MAIL/DELETE_FAILED".Localize() + reason.Localize(), null, "APP/ALERT/BUTTON/OK".Localize(), null);
                    alertView.Show();
	            }
	        });
	    }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier == "MessageToComposeSegue")
            {
                ComposeViewController controller = segue.DestinationViewController as ComposeViewController;
                if (controller != null) 
                    controller.MailMessage = MailMessage;
            }
        }
	}
}
