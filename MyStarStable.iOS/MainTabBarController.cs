// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using UIKit;
using MyStarStable.Common;
using System.Threading;

namespace MyStarStable.iOS
{
	public partial class MainTabBarController : UITabBarController
	{
		public MainTabBarController (IntPtr handle) : base (handle)
		{
            
		}

	    public override void ViewDidLoad()
	    {
	        base.ViewDidLoad();
            MailHelper.Instance.UnreadCountChanged += MailHelperOnUnreadCountChanged;

	        MailHelper.Instance.GetMailAsync((result, reason) => InvokeOnMainThread(() =>
	        {
	            if (!result)
	            {
                    UIAlertView alertView = new UIAlertView("APP/ALERT/TITLE/ERROR".Localize(), "APP/MAIL/FETCH_FAILED".Localize() + reason.Localize(), null, "APP/ALERT/BUTTON/OK".Localize(), null);
                    alertView.Show();
                }
	        }));

            CalendarHelper.Instance.PendingEventsChanged += CalendarHelperOnPendingEventsChanged;
            CalendarHelper.Instance.GetPendingEventsAsync(null);

            // Set initial tab.
            AppDelegate mainDelegate = (UIApplication.SharedApplication.Delegate as AppDelegate);
            if (mainDelegate != null && mainDelegate.InitialTabTag >= 0)
	        {
	            for (int i = 0; i < TabBar.Items.Length; ++i)
	            {
	                if (TabBar.Items[i].Tag == mainDelegate.InitialTabTag)
	                {
	                    SelectedIndex = i;
	                    break;
	                }
	            }
	        }
	    }

        private void CalendarHelperOnPendingEventsChanged(object sender, EventArgs eventArgs)
	    {
	        InvokeOnMainThread(() =>
	        {
	            int pendingCount = CalendarHelper.Instance.PendingEvents != null ? CalendarHelper.Instance.PendingEvents.Count : 0;
	            var tabItem = TabBar.Items.First(item => item.Tag == 2);
                tabItem.BadgeValue = pendingCount > 0 ? pendingCount.ToString() : null;
	        });

        }

	    private void MailHelperOnUnreadCountChanged(object sender, MailHelper.UnreadCountChangedEventArgs e)
	    {
	        InvokeOnMainThread(() =>
	        {
	            var tabItem = TabBar.Items.First(item => item.Tag == 1);
                tabItem.BadgeValue = e.UnreadCount > 0 ? e.UnreadCount.ToString() : null;
	        });
	    }
	}
}
